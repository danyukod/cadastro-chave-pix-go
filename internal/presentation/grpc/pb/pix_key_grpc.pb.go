// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/pix_key.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PixKeyManagerServiceClient is the client API for PixKeyManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PixKeyManagerServiceClient interface {
	RegisterPixKey(ctx context.Context, in *RegisterPixKeyRequest, opts ...grpc.CallOption) (*RegisterPixKeyResponse, error)
}

type pixKeyManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPixKeyManagerServiceClient(cc grpc.ClientConnInterface) PixKeyManagerServiceClient {
	return &pixKeyManagerServiceClient{cc}
}

func (c *pixKeyManagerServiceClient) RegisterPixKey(ctx context.Context, in *RegisterPixKeyRequest, opts ...grpc.CallOption) (*RegisterPixKeyResponse, error) {
	out := new(RegisterPixKeyResponse)
	err := c.cc.Invoke(ctx, "/pb.PixKeyManagerService/RegisterPixKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PixKeyManagerServiceServer is the server API for PixKeyManagerService service.
// All implementations must embed UnimplementedPixKeyManagerServiceServer
// for forward compatibility
type PixKeyManagerServiceServer interface {
	RegisterPixKey(context.Context, *RegisterPixKeyRequest) (*RegisterPixKeyResponse, error)
	mustEmbedUnimplementedPixKeyManagerServiceServer()
}

// UnimplementedPixKeyManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPixKeyManagerServiceServer struct {
}

func (UnimplementedPixKeyManagerServiceServer) RegisterPixKey(context.Context, *RegisterPixKeyRequest) (*RegisterPixKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPixKey not implemented")
}
func (UnimplementedPixKeyManagerServiceServer) mustEmbedUnimplementedPixKeyManagerServiceServer() {}

// UnsafePixKeyManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PixKeyManagerServiceServer will
// result in compilation errors.
type UnsafePixKeyManagerServiceServer interface {
	mustEmbedUnimplementedPixKeyManagerServiceServer()
}

func RegisterPixKeyManagerServiceServer(s grpc.ServiceRegistrar, srv PixKeyManagerServiceServer) {
	s.RegisterService(&PixKeyManagerService_ServiceDesc, srv)
}

func _PixKeyManagerService_RegisterPixKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPixKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixKeyManagerServiceServer).RegisterPixKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PixKeyManagerService/RegisterPixKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixKeyManagerServiceServer).RegisterPixKey(ctx, req.(*RegisterPixKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PixKeyManagerService_ServiceDesc is the grpc.ServiceDesc for PixKeyManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PixKeyManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PixKeyManagerService",
	HandlerType: (*PixKeyManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPixKey",
			Handler:    _PixKeyManagerService_RegisterPixKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pix_key.proto",
}
